<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Proxmox on juni's blog ٩(◕‿◕｡)۶</title><link>https://blog.juni-mp4.com/categories/proxmox/</link><description>Recent content in Proxmox on juni's blog ٩(◕‿◕｡)۶</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 13 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.juni-mp4.com/categories/proxmox/index.xml" rel="self" type="application/rss+xml"/><item><title>Minecraft Server From Scratch (Proxmox LXC, Docker Compose + itzg)</title><link>https://blog.juni-mp4.com/posts/14/minecraft-server-from-scratch-proxmox-lxc-docker-compose-+-itzg/</link><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid>https://blog.juni-mp4.com/posts/14/minecraft-server-from-scratch-proxmox-lxc-docker-compose-+-itzg/</guid><description>&lt;p>Just a smol lil guide for myself to set up a minecraft server from scratch, &lt;em>as I cannot count the number of times I&amp;rsquo;ve had to re-learn this when I migrate from server to server&lt;/em>.&lt;/p>
&lt;p>I&amp;rsquo;ve opted for services that &lt;em>should&lt;/em> (for the most part) be supported long-term and are relatively secure &amp;amp; lightweight. However, as any good netizen should do, &lt;em>&lt;strong>please take my advice with a granule of sugar&lt;/strong>&lt;/em>&amp;hellip;&lt;/p>
&lt;h2 id="--set-up-lxc-container-in-proxmox">- Set up &lt;code>LXC&lt;/code> Container in Proxmox&lt;/h2>
&lt;ol>
&lt;li>Create new container in &lt;code>proxmox&lt;/code> using the &lt;code>Ubuntu 24.04&lt;/code> &lt;code>LXC&lt;/code> image (or your desired flavour, noting commands may differ slightly depending on package managers) - allocating at least &lt;code>4GB RAM&lt;/code> &amp;amp; &lt;code>2-4 CPU&lt;/code> cores to the machine.&lt;/li>
&lt;li>Once logged in, create a &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-new-sudo-enabled-user-on-ubuntu">sudo-enabled user&lt;/a> with:
&lt;code>adduser myuser&lt;/code>
Set the password, then:
&lt;code>usermod -aG sudo myuser&lt;/code>
&lt;code>su myuser&lt;/code>&lt;/li>
&lt;li>&lt;strong>Harden SSH&lt;/strong> - ensuring the following values are changed &amp;amp; set within &lt;code>/etc/sshd_config&lt;/code>.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Port &lt;span style="color:#ae81ff">22&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PermitRootLogin no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MaxAuthTries &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MaxSessions &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PubkeyAuthentication yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PasswordAuthentication no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PermitEmptyPasswords no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>KbdInteractiveAuthentication no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>UsePAM no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>X11Forwarding no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PrintMotd no
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ClientAliveInterval &lt;span style="color:#ae81ff">600&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ClientAliveCountMax &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Add your local machine&amp;rsquo;s &lt;code>ed25519_pub&lt;/code> key to the &lt;code>~/.ssh/authorized_keys&lt;/code> file (creating it, if it doesn&amp;rsquo;t exist). This will allow key-based login for user &lt;code>myuser&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>&lt;em>&lt;strong>Be careful not to lock yourself out here, test with password based login first! For example, by setting &lt;code>PasswordAuthentication yes&lt;/code> and logging in, before changing it to &lt;code>PasswordAuthentication no&lt;/code>&lt;/strong>&lt;/em>.&lt;/p>
&lt;ol start="4">
&lt;li>
&lt;p>Ensure &lt;code>DNS&lt;/code> is setup properly - check &lt;code>/etc/resolv.conf&lt;/code>.
Basic internet functionality can be tested &amp;amp; achieved by having the line &lt;code>nameserver 8.8.8.8&lt;/code>, but configure to your use case.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Login from local machine with &lt;code>ssh myuser@XXX.XXX.XXX.XXX&lt;/code>. Test your sudo privileges with &lt;code>sudo ls /root&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Lock root account with &lt;code>sudo passwd root -l&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Run &lt;code>sudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Find the current &lt;code>IP&lt;/code> with &lt;code>ip -a&lt;/code> (typically on the &lt;code>eth&lt;/code> interface) and set it as static (in &lt;code>proxmox&lt;/code> and/or on your router).&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="--install-docker-compose--itzg-minecraft-server">- Install Docker (Compose) &amp;amp; itzg Minecraft Server&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Install Docker Engine&lt;/strong> - follow steps (distro-specific) &lt;a href="https://docs.docker.com/engine/install/">here&lt;/a>, as you will need to configure your package repository properly.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Install Docker Compose&lt;/strong> - following steps &lt;a href="https://docs.docker.com/compose/install/linux/#install-using-the-repository">here&lt;/a>. &lt;code>sudo apt install docker-compose&lt;/code> worked for me.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Make a new directory for the Minecraft server&lt;/strong> to sit in: &lt;code>~/minecraft&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Inside, &lt;strong>create a &lt;code>docker-compose.yml&lt;/code>&lt;/strong>, generated with something like &lt;a href="https://setupmc.com/java-server/">setupmc.com&lt;/a> to specify server version, plugins, etc.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>My example &lt;code>docker-compose.yml&lt;/code> file is below &lt;em>(for a &lt;code>1.18&lt;/code> server, replacing Timezone (&lt;code>TZ&lt;/code>) accordingly)&lt;/em>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mc&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">itzg/minecraft-server:java17 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tty&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">stdin_open&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;25565:25565&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">EULA&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TRUE&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">TYPE&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;PAPER&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">VERSION&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1.18&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">PAPER_CHANNEL&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;experimental&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">MEMORY&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;4096M&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">MOTD&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;welcome, traveller, to an older time...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> USE_AIKAR_FLAGS: &amp;#34;&lt;/span>&lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#e6db74">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> TZ: &amp;#34;&lt;/span>[&lt;span style="color:#ae81ff">YOUR-TIMEZONE]&amp;#34; &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;./data:/data&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>
&lt;p>&lt;strong>Start the container&lt;/strong> from within the same directory as &lt;code>docker-compose.yml&lt;/code> with &lt;code>sudo docker compose up -d&lt;/code>. After the image is finished being pulled from the &lt;a href="https://github.com/itzg/docker-minecraft-server/tree/master">itzg minecraft server repo&lt;/a>, &lt;strong>watch the logs&lt;/strong> as the server starts with &lt;code>sudo docker compose logs -f&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>If you get an error message about the “class file version” after starting the server, check &lt;a href="https://setupmc.com/guides/determining-correct-java-version-for-operating-minecraft-server/">this table to see which Java version corresponds to the respective class file version&lt;/a>. Then adjust the Docker image tag in the setupmc.com](&lt;a href="https://setupmc.com/java-server/">https://setupmc.com/java-server/&lt;/a>) configurator accordingly.&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>To stop the server&lt;/strong>, run &lt;code>sudo docker compose down&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>To migrate a world save file over&lt;/strong> (if applicable), copy the following files (at minimum) over from your old server (using something like &lt;code>scp&lt;/code>, or via a GUI if you install something like &lt;a href="https://webmin.com/download/">webmin&lt;/a>):&lt;/p>
&lt;ul>
&lt;li>&lt;code>server.properties&lt;/code>&lt;/li>
&lt;li>&lt;code>/world&lt;/code>&lt;/li>
&lt;li>&lt;code>/world_the_nether&lt;/code> (if exists)&lt;/li>
&lt;li>&lt;code>/world_the_end&lt;/code> (if exists)&lt;/li>
&lt;li>&lt;code>whitelist.json&lt;/code> (if applicable)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;em>Ensure to tweak server-specific configurations within &lt;code>server.properties&lt;/code> if needed!&lt;/em>&lt;/p>
&lt;ol start="9">
&lt;li>
&lt;p>As you&amp;rsquo;re running through &lt;code>docker&lt;/code>, it should handle the local network ports on the &lt;code>lxc&lt;/code> for you nicely (if on a fresh &lt;code>linux&lt;/code> install). Also, before I continue, it would be remiss of me to exclude the obligatory ***do this so at your own risk, and please consider the below server hardening methods:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://madelinemiller.dev/blog/root-minecraft-server/">not running the server as root! &lt;em>(not a problem if you followed the guide above)&lt;/em>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://madelinemiller.dev/blog/ultimate-guide-running-minecraft-server/#security">general server tips&lt;/a> &amp;amp; &lt;a href="https://www.spigotmc.org/threads/minecraft-security-part-1-awareness.414081/">links to hardening methodology&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>With that out of the way, now time to &lt;strong>open up a port on your local&lt;/strong> router/modem. For me, I&amp;rsquo;ve opted for a little &amp;ldquo;security through obscurity&amp;rdquo; (a contentious topic, but given my threat model) by mapping my &lt;strong>router&amp;rsquo;s external port&lt;/strong>, &lt;code>43456&lt;/code> to the default minecraft listening port (&lt;code>25565&lt;/code> - specified in &lt;code>server.properties&lt;/code>) on my &lt;code>lxc&lt;/code> machine:&lt;/p>
&lt;p>&lt;img src="https://blog.juni-mp4.com/posts/14/Screenshot%202025-04-13%20at%209.15.24%20pm.png" alt="">
Additionally, I&amp;rsquo;ve set up a &lt;code>DNS A record&lt;/code> for the domain I own to point at my router&amp;rsquo;s &lt;code>public IP&lt;/code>, so I can access my server (and share it) with &lt;code>my-domain:43456&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;em>&lt;strong>Now, you should be all up and running! :3&lt;/strong>&lt;/em>&lt;/p>
&lt;div style="text-align: center">
&lt;img src="https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExYTY3OTM0YTI1dzBtb2htNHRzbzdtaTA1Yzh4ZHQ2aXdmZmZqb2xscCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/a6pzK009rlCak/giphy.gif" style="max-width: 400px; max-height: 300px">&lt;/img>
&lt;/div>
&lt;h2 id="--for-any-further-troubleshooting">- For any further troubleshooting&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docker-minecraft-server.readthedocs.io/en/latest/#using-docker-compose">itzg Docker Minecraft Server Documentation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://setupmc.com/java-server/">&lt;code>docker-compose.yaml&lt;/code> configuration generator (SetupMC)&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Plex &amp; Proxmox</title><link>https://blog.juni-mp4.com/posts/4/proxmox-plex-container/</link><pubDate>Fri, 04 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.juni-mp4.com/posts/4/proxmox-plex-container/</guid><description>&lt;blockquote>
&lt;p>&amp;hellip; &amp;amp; pulling files from an external SSD &amp;amp;/or an internal HDD. &lt;strong>Yes, this was&amp;hellip; interesting.&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;h2 id="--so-why-did-i-write-this">- So&amp;hellip; why did I write this?&lt;/h2>
&lt;p>My primary objective was to setup a home lab, which could do the following things:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>run LXCs of various linux distros (Kali via external install, and CentOS via Proxmox template) &lt;strong>[done]&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>run a Plex Media server, accessing both external SSD and internal HDD data &lt;strong>[done]&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Setup a VPN for use in the server &lt;strong>[done]&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Setup VPNs for containers &lt;strong>[yet to do]&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Automatically pull files from various torrents safely and securely with Deluge (?), Sonarr, Radarr, and Prowlarr &lt;strong>[yet to do]&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Run my previously self-hosted Minecraft server &lt;strong>[yet to do]&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>act as a NAS to store and backup family photos &lt;strong>[for the future, if I upgrade hardware]&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>I know that my use case is incredibly specific, but after scouring the web for guides on the various problems I had along the way, I was exhausted enough to pull together a guide of how I accomplished each of the above.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>This guide will focus on setting up a Plex Media server in a Proxmox container, which can access data from both an external SSD and an internal HDD.&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;h2 id="--prerequisites">- Prerequisites:&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Installing Proxmox on a server&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="--setting-up-a-container">- Setting up a container&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Download a template for the distribution of Linux you want to use.&lt;/strong>&lt;/p>
&lt;p>Simple? Should be. Pick your desired flavour of Linux and it should be available via accessing your local volume [&lt;code>local (juniproxmox)&lt;/code> for me] and selecting &lt;code>CT Templates&lt;/code> &amp;gt; &lt;code>Templates&lt;/code>. However, &lt;em>make sure what you&amp;rsquo;re selecting is &lt;strong>actually a LXC&lt;/strong>, and not another version of Ubuntu/Debian (otherwise it will run like a VM inside of a container. And yes, that means it&amp;rsquo;s s l o w)&lt;/em>. The difference is somewhat explored in the folllowing &amp;lsquo;shallow dive&amp;rsquo; of sorts, and practically illustrated within Proxmox in Figure 2.&lt;/p>
&lt;blockquote>
&lt;h3 id="testing-the-waters-1-lxc-vs-vms">&lt;strong>Testing the waters #1: LXC vs VMs.&lt;/strong>&lt;/h3>
&lt;p>From what I understand, LXCs are essentially lightweight VMs, which share the kernel (lowest-level software interfacing with computer hardware) with the host OS. In my case, Proxmox (based on Debian Linux) will share its kernel with an installed LXC (in this case, CentOS 9 Stream), allowing the LXC to run significantly faster than a VM by having access to the same kernel. However, I am unsure if you can run a LXC of Debian/Ubuntu on top of existing Debian/Ubuntu infrastructure, as I haven&amp;rsquo;t been able to easily find LXC images for these online. However, I am most likely very much misunderstanding the nature of LXCs in general and am missing something obvious, so if anyone knows, please feel free to enlighten me by contacting me ~&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>Figure 1: Finding CT Templates&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://blog.juni-mp4.com/posts/4/e50f054c-0ace-44ed-bb6e-96fe76c6619b.png" alt="">&lt;/p>
&lt;p>&lt;strong>Figure 2: LXC Images vs Standard Image&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://blog.juni-mp4.com/posts/4/069bb70d-9876-4d23-bcd9-f770b78adedc.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>After the CT template has been downloaded, installing is fairly straightforward.&lt;/strong>
I followed the following video to get up to speed on what was recommended for a container install.&lt;/p>
&lt;p>Here are the specs for my installation of CentOS 9 Stream, running a Plex Server which would have 2-3 users MAX (these are only testing values, take them with a grain of salt!):&lt;/p>
&lt;p>&lt;img src="https://blog.juni-mp4.com/posts/4/2434eda3-0247-48df-947b-9614ee44e17d.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://blog.juni-mp4.com/posts/4/5d7670d4-5dc4-40d8-8de1-a02feb276966.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Once the container has been setup and you can access the console (visuals included in above video, it&amp;rsquo;s pretty straightforward), login using root (and preferably setup a lower privilege user if you&amp;rsquo;re using the system for important things) and your container is ready to use!.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="--installing-plex-media-server">- Installing Plex Media Server:&lt;/h2>
&lt;p>&lt;em>~ to be written ~&lt;/em>&lt;/p>
&lt;hr>
&lt;h2 id="--passing-usbexternal-devices-to-lxc">- Passing USB/External Devices to LXC:&lt;/h2>
&lt;p>Now, for my use case, I wanted to use an external SSD containing media files as a sort of &amp;lsquo;attached storage device&amp;rsquo; and have my Plex media server access and make the files streamable. However, doing so is a little complicated. It&amp;rsquo;s covered rather well in &lt;a href="https://www.youtube.com/@virtualizeeverything">Virtualize Everything&amp;rsquo;s&lt;/a> series of videos, but it can be confusing as there are quite a few ways of doing it, depending on one&amp;rsquo;s use case.&lt;/p>
&lt;p>&lt;em>&lt;strong>My use case: Pass an External Device to a LXC WITHOUT ERASING DATA FROM IT, to transfer/access files on the External Device.&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Based on the following video: &lt;a href="https://www.youtube.com/watch?v=6oripI7F8tw">Add USB storage to Proxmox (CLI)&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Note: The term &amp;lsquo;SSD&amp;rsquo; can be used interchangeably with &amp;lsquo;External HDD/USB&amp;rsquo; &amp;ndash;&amp;gt; this should work for all removable storage solutions.&lt;/p>&lt;/blockquote>
&lt;p>Plug in your USB to the server (in my case, my brother&amp;rsquo;s old laptop). Nagivate to &lt;code>'your home node' (juniproxmox)&lt;/code> -&amp;gt; &lt;code>disks&lt;/code>. Here is a display of all of the functioning devices connected to your machine. My laptop has an internal HDD (listed as &lt;code>sda&lt;/code>), and an internal SSD (used as the boot drive, &lt;code>sdb&lt;/code>). I also have a USB plugged in to the device, occupying &lt;code>sdc&lt;/code>.&lt;/p>
&lt;p>Thus, my SSD is &lt;code>sdd&lt;/code>, which checks out given it&amp;rsquo;s been identified as &lt;code>SSD&lt;/code> with &lt;code>1.00TB&lt;/code> of storage. It is best practice to have the drive using GPT, although I will be attempting to use one still using MBR, as it has worked before for me.&lt;/p>
&lt;p>&lt;img src="https://blog.juni-mp4.com/posts/4/212d77a6-88cd-47d8-9c21-d186f24e2da4.png" alt="">&lt;/p>
&lt;h2 id="--formatting-drive-to-use-gpt---guid-partitioning-table">- Formatting drive to use GPT - GUID Partitioning Table.&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>On your main node, open the shell and use &lt;code>fdisk -l&lt;/code> to list all available disks on the system in the CLI.&lt;/p>
&lt;p>After the text has been printed, look near the bottom for your chosen device, in my case &lt;code>sdd&lt;/code>. It&amp;rsquo;s product name and actual usable size (smaller than but close to its advertised size) should be listed too. Take note of the device&amp;rsquo;s identifier, which includes its location on the system. For me, it&amp;rsquo;s listed under &amp;lsquo;Device&amp;rsquo; at the bottom, as &lt;code>/dev/sdd1&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://blog.juni-mp4.com/posts/4/d7352649-ef16-4aeb-b109-5d164023e67e.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Now we know the path to the device, we need to make a folder on our home system for it to be accessed from. I think of this as creating its new address - the SSD has gone from floating around in the ether, homeless, and we&amp;rsquo;re now making a directory on our system for it to call home. I poked around a bit using the &lt;code>cd&lt;/code> (&lt;code>cd&lt;/code> = &lt;strong>change directory&lt;/strong> - essentially how you traverse your Linux system in the CLI) and &lt;code>ls&lt;/code> (&lt;code>ls&lt;/code> = &lt;strong>list contents in current directory&lt;/strong>) commands, before deciding to make a new directory in &lt;code>/mnt/pve/&lt;/code>, called &lt;code>EXT_SSD&lt;/code>. I suggest navigating to where you&amp;rsquo;d like the directory to be and &lt;strong>then&lt;/strong> making it, as not all system&amp;rsquo;s file structures are the same.&lt;/p>
&lt;p>Once I found the desired folder, create the directory using:&lt;/p>
&lt;p>&lt;code>mkdir YOUR_DIRECTORY_NAME_HERE&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://blog.juni-mp4.com/posts/4/f1562673-1712-4dab-8f58-dfbc0106998a.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Now, we need to mount the device so that the system can access its contents. This command takes the following form:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;code>mount [physical device identifier] [new folder 'home']&lt;/code>&lt;/p>
&lt;p>This is essentially telling the system to point my SSD (which has the identifier &lt;code>/dev/sdd1&lt;/code>, as we identified in step 1) to live in the directory &lt;code>/mnt/pve/EXT_SSD/&lt;/code> so its contents can be accessed by my home user.&lt;/p>
&lt;p>To test if it worked, I navigated to its new home with &lt;code>cd mnt/pve/EXT_SSD/&lt;/code> and then listed its contents and&amp;hellip; success! I can now access my files on an external SSD within Linux.&lt;/p>
&lt;p>&lt;img src="https://blog.juni-mp4.com/posts/4/4a1ee575-6f6a-4ca2-a52f-045261e4163b.png" alt="">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Important Note:&lt;/strong> Every time my system reboots, the device needs to be manually re-mounted (aka repeating step 3) in order to access the files on the SSD. To avoid having to do this, I modified the crontabs file (specifies tasks to be run ahead of time/periodically) using &lt;code>sudo crontabs -e&lt;/code> . I added &lt;code>@reboot&lt;/code> to specify the task to run upon reboot, added &lt;code>sudo&lt;/code> at the start just to ensure it runs even if logging in with a lower privilege user, and ended it with &amp;amp; to tell the system to keep going &amp;amp; setting up after running this command:&lt;/p>
&lt;blockquote>
&lt;p>&lt;img src="https://blog.juni-mp4.com/posts/4/924eddd8-ffd1-47a6-93eb-8c324bde0a91.png" alt="">.&lt;/p>
&lt;blockquote>
&lt;p>I learnt this &lt;a href="https://www.youtube.com/watch?v=Gl9HS7-H0mI">here&lt;/a>.&lt;/p>&lt;/blockquote>&lt;/blockquote>&lt;/blockquote>
&lt;hr>
&lt;h3 id="-miscellaneous-images-to-be-used-in-future-tutorials-if-i-return-to-this-">~ miscellaneous images to be used in future tutorials if i return to this ~&lt;/h3>
&lt;p>&lt;img src="https://blog.juni-mp4.com/posts/4/1327d5e1-354e-4fb3-a104-a1144c537db4.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://blog.juni-mp4.com/posts/4/435c87ee-a2ff-41e3-831b-8b6b19ea58dd.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://blog.juni-mp4.com/posts/4/a323178c-9191-4dde-823d-99a3d0bef9e2.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://blog.juni-mp4.com/posts/4/84802981-73da-427a-a7ab-1d2ef2e235cd.png" alt="">&lt;/p>
&lt;hr>
&lt;p>&lt;strong>DISCLAIMER:&lt;/strong> &lt;em>I would consider this a LEGACY POST of mine, written a long time ago. Please excuse any typos, errors or lapses in memory/judgement - as it was added to the site from the archives, just to put everything in one place. Thankq for your understanding 🙇‍♀️&lt;/em>&lt;/p>
&lt;hr></description></item><item><title>Passing USB Devices into Proxmox VMs</title><link>https://blog.juni-mp4.com/posts/3/usb-passthru-proxmox/</link><pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.juni-mp4.com/posts/3/usb-passthru-proxmox/</guid><description>&lt;blockquote>
&lt;p>~ Using &lt;a href="https://blog.juni-mp4.com/posts/3/51YRuNnOOxL._AC_UF894,1000_QL80_.jpg">TP-Link TL-WN722N&lt;/a> ~&lt;/p>&lt;/blockquote>
&lt;p>The GUI way of adding a USB device to a Proxmox VM didn&amp;rsquo;t work for me when using a USB network adapter (the device id was not showing up when trying to add to the VM via the GUI), so here is a simple manual workaround.&lt;/p>
&lt;h2 id="--steps">- Steps:&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Plug in your desired USB device into the physical machine you&amp;rsquo;re running Proxmox on.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Using the CLI on the Proxmox host machine (recommended to use ssh/webGUI CLI), list all connected USB devices with &lt;code>lsusb&lt;/code>:&lt;/p>
&lt;p>&lt;img src="https://blog.juni-mp4.com/posts/3/92c790c2-8df1-4fe9-b207-8822f3458801.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Note the ID of the desired device. In this case the &lt;code>TP-Link TL-WN722&lt;/code>, with ID: &lt;code>2357:010c&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ensure the desired Proxmox VM that you want to pass the USB device to is powered off, and take note of its number (&lt;code>104&lt;/code> in the below image):&lt;/p>
&lt;p>&lt;img src="https://blog.juni-mp4.com/posts/3/1198292a-3a93-4620-9c7f-27daa746d07e.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Still on the Proxmox host machine, run the following command to pass the USB device through to one or more of your virtual machines:&lt;/p>
&lt;p>&lt;code>qm set [VM#] -usb0 host=[host-id]&lt;/code>&lt;/p>
&lt;p>e.g. for VM &lt;code>#104&lt;/code> &amp;amp; host id &lt;code>2357:010c&lt;/code>, I would run:&lt;/p>
&lt;p>&lt;code>qm set 104 -usb0 host=2357:010c&lt;/code>&lt;/p>
&lt;p>&lt;strong>Source:&lt;/strong> &lt;a href="https://pve.proxmox.com/wiki/USB_Devices_in_Virtual_Machines">&lt;em>Proxmox documentation&lt;/em>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Boot up your Proxmox VM (in my case, VM &lt;code>#104&lt;/code>) and run &lt;code>lsusb&lt;/code> in using the CLI. You should now see the USB device that you just passed through (&lt;code>2357:010c&lt;/code> for me) in there!&lt;/p>
&lt;p>&lt;img src="https://blog.juni-mp4.com/posts/3/649e3f6b-48ca-4f50-a9b8-7189d64a135b.png" alt="">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="hope-this-helps-a-few-other-fellow-lost-souls-">Hope this helps a few other fellow lost souls! ^^&lt;/h2>
&lt;hr>
&lt;p>&lt;strong>DISCLAIMER:&lt;/strong> &lt;em>I would consider this a LEGACY POST of mine, written a long time ago. Please excuse any typos, errors or lapses in memory/judgement - as it was added to the site from the archives, just to put everything in one place. Thankq for your understanding 🙇‍♀️&lt;/em>&lt;/p>
&lt;hr></description></item></channel></rss>